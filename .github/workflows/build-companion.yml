name: Build Zoom Connection Plugin

on:
  push:
    branches: [ main, master ]
    paths:
      - 'companion-app/**'
      - '.github/workflows/build-companion.yml'
  release:
    types: [ created ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: companion-app/package.json
    
    - name: Install dependencies
      run: |
        cd companion-app
        npm install --verbose
    
    - name: Create build directory and icons
      run: |
        cd companion-app
        mkdir -p build
        # Copy tray icon as placeholder for all platforms
        cp assets/tray-icon.png build/icon.png
    
    - name: Create platform-specific icons
      shell: bash
      run: |
        cd companion-app/build
        # Create placeholder icons for all platforms
        cp icon.png icon.ico  # Windows
        cp icon.png icon.icns # macOS
    
    - name: Debug - List files before build
      run: |
        cd companion-app
        echo "=== Current directory contents ==="
        ls -la
        echo "=== Build directory contents ==="
        ls -la build/ || echo "No build directory"
        echo "=== Package.json contents ==="
        cat package.json
    
    - name: Build for Windows
      if: matrix.os == 'windows-latest'
      run: |
        cd companion-app
        npm run build:win
      env:
        CI: true
        DEBUG: electron-builder
    
    - name: Build for macOS
      if: matrix.os == 'macos-latest'
      run: |
        cd companion-app
        npm run build:mac
      env:
        CI: true
        DEBUG: electron-builder
        CSC_IDENTITY_AUTO_DISCOVERY: false
    
    - name: Build for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd companion-app
        npm run build:linux
      env:
        CI: true
        DEBUG: electron-builder
    
    - name: Debug - List build output
      run: |
        cd companion-app
        echo "=== Final directory structure ==="
        find . -type f -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" || echo "No installer files found"
        echo "=== Dist directory contents ==="
        ls -la dist/ || echo "No dist directory found"
    
    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: |
          companion-app/dist/*.exe
          companion-app/dist/**/*.exe
        if-no-files-found: warn
    
    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-installer
        path: |
          companion-app/dist/*.dmg
          companion-app/dist/**/*.dmg
        if-no-files-found: warn
    
    - name: Upload Linux artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-installer
        path: |
          companion-app/dist/*.AppImage
          companion-app/dist/**/*.AppImage
        if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Get package version
      id: package-version
      run: |
        VERSION=$(node -p "require('./companion-app/package.json').version")
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      continue-on-error: true
    
    - name: Debug - List downloaded artifacts
      run: |
        echo "=== Downloaded artifacts structure ==="
        find . -type f 2>/dev/null || echo "No files found"
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.package-version.outputs.tag }}
        name: Zoom Connection Plugin ${{ steps.package-version.outputs.version }}
        body: |
          ## Zoom Connection Plugin Release
          
          ### What's New
          - Latest version of the Zoom Connection Plugin
          - Enhanced stability and performance
          - Compatible with all supported Windows, macOS, and Linux versions
          
          ### Download Instructions
          1. **Windows Users**: Download `ZoomConnectionPlugin-Setup.exe`
          2. **macOS Users**: Download `ZoomConnectionPlugin.dmg`
          3. **Linux Users**: Download `ZoomConnectionPlugin.AppImage`
          
          ### Installation
          - **Windows**: Run the .exe file and follow the installation wizard
          - **macOS**: Open the .dmg file and drag the app to Applications folder
          - **Linux**: Make the .AppImage executable and run it
          
          ### System Requirements
          - **Windows**: Windows 7 or newer
          - **macOS**: macOS 10.13 or newer
          - **Linux**: Ubuntu 18.04 or equivalent
          
          For support, please contact your course administrator.
        draft: false
        prerelease: false
        files: |
          windows-installer/**/*.exe
          macos-installer/**/*.dmg
          linux-installer/**/*.AppImage
