name: Build Zoom Connection Plugin

on:
  push:
    branches: [ main, master ]
    paths:
      - 'companion-app/**'
      - '.github/workflows/build-companion.yml'
  release:
    types: [ created ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: companion-app/package.json
    
    - name: Install dependencies
      run: |
        cd companion-app
        npm install
    
    - name: Create build directory
      run: |
        cd companion-app
        mkdir -p build
    
    - name: Copy icon files
      run: |
        cd companion-app
        # Copy tray icon as placeholder icons for builds
        cp assets/tray-icon.png build/icon.png
    
    - name: Create Windows icon (placeholder)
      if: matrix.os == 'windows-latest'
      run: |
        cd companion-app/build
        # For Windows, we'll just copy the PNG as placeholder since no .ico exists
        cp icon.png icon.ico
    
    - name: Create macOS icon (placeholder)
      if: matrix.os == 'macos-latest'
      run: |
        cd companion-app/build
        # For macOS, we'll just copy the PNG as placeholder since no .icns exists
        cp icon.png icon.icns
    
    - name: Build for Windows
      if: matrix.os == 'windows-latest'
      run: |
        cd companion-app
        npm run build:win
    
    - name: Build for macOS
      if: matrix.os == 'macos-latest'
      run: |
        cd companion-app
        npm run build:mac
    
    - name: Build for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd companion-app
        npm run build:linux
    
    - name: List Windows build output
      if: matrix.os == 'windows-latest'
      run: |
        cd companion-app
        echo "Contents of dist directory:"
        ls -la dist/ || echo "No dist directory found"
        find . -name "*.exe" -type f || echo "No .exe files found"
    
    - name: List macOS build output
      if: matrix.os == 'macos-latest'
      run: |
        cd companion-app
        echo "Contents of dist directory:"
        ls -la dist/ || echo "No dist directory found"
        find . -name "*.dmg" -type f || echo "No .dmg files found"
    
    - name: List Linux build output
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd companion-app
        echo "Contents of dist directory:"
        ls -la dist/ || echo "No dist directory found"
        find . -name "*.AppImage" -type f || echo "No .AppImage files found"
    
    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: companion-app/dist/*.exe
        if-no-files-found: warn
    
    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-installer
        path: companion-app/dist/*.dmg
        if-no-files-found: warn
    
    - name: Upload Linux artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-installer
        path: companion-app/dist/*.AppImage
        if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Get package version
      id: package-version
      run: |
        VERSION=$(node -p "require('./companion-app/package.json').version")
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      continue-on-error: true
    
    - name: List downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        ls -la . || echo "No artifacts directory"
        find . -type f || echo "No files found"
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.package-version.outputs.tag }}
        release_name: Zoom Connection Plugin ${{ steps.package-version.outputs.version }}
        body: |
          ## Zoom Connection Plugin Release
          
          ### What's New
          - Latest version of the Zoom Connection Plugin
          - Enhanced stability and performance
          - Compatible with all supported Windows, macOS, and Linux versions
          
          ### Download Instructions
          1. **Windows Users**: Download `ZoomConnectionPlugin-Setup.exe`
          2. **macOS Users**: Download `ZoomConnectionPlugin.dmg`
          3. **Linux Users**: Download `ZoomConnectionPlugin.AppImage`
          
          ### Installation
          - **Windows**: Run the .exe file and follow the installation wizard
          - **macOS**: Open the .dmg file and drag the app to Applications folder
          - **Linux**: Make the .AppImage executable and run it
          
          ### System Requirements
          - **Windows**: Windows 7 or newer
          - **macOS**: macOS 10.13 or newer
          - **Linux**: Ubuntu 18.04 or equivalent
          
          For support, please contact your course administrator.
        draft: false
        prerelease: false
    
    - name: Find and upload Windows installer
      if: hashFiles('./windows-installer/*.exe') != ''
      run: |
        EXE_FILE=$(find ./windows-installer -name "*.exe" | head -1)
        if [ -n "$EXE_FILE" ]; then
          echo "Found Windows installer: $EXE_FILE"
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Content-Type: application/octet-stream" \
               --data-binary @"$EXE_FILE" \
               "${{ steps.create_release.outputs.upload_url }}?name=ZoomConnectionPlugin-Setup.exe"
        fi
    
    - name: Find and upload macOS installer
      if: hashFiles('./macos-installer/*.dmg') != ''
      run: |
        DMG_FILE=$(find ./macos-installer -name "*.dmg" | head -1)
        if [ -n "$DMG_FILE" ]; then
          echo "Found macOS installer: $DMG_FILE"
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Content-Type: application/octet-stream" \
               --data-binary @"$DMG_FILE" \
               "${{ steps.create_release.outputs.upload_url }}?name=ZoomConnectionPlugin.dmg"
        fi
    
    - name: Find and upload Linux installer
      if: hashFiles('./linux-installer/*.AppImage') != ''
      run: |
        APPIMAGE_FILE=$(find ./linux-installer -name "*.AppImage" | head -1)
        if [ -n "$APPIMAGE_FILE" ]; then
          echo "Found Linux installer: $APPIMAGE_FILE"
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Content-Type: application/octet-stream" \
               --data-binary @"$APPIMAGE_FILE" \
               "${{ steps.create_release.outputs.upload_url }}?name=ZoomConnectionPlugin.AppImage"
        fi
