name: Build Zoom Connection Plugin

on:
  push:
    branches: [ main, master ]
    paths:
      - 'companion-app/**'
      - '.github/workflows/build-companion.yml'
  release:
    types: [ created ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: companion-app/package.json
    
    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxcomposite1 libxdamage1 libxrandr2 libgbm1 libgtk-3-dev libxss1 libasound2-dev xvfb
    
    - name: Setup Python (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install node-gyp dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        npm install -g node-gyp
        npm config set msvs_version 2022
    
    - name: Clear npm cache and install dependencies
      run: |
        cd companion-app
        npm cache clean --force
        rm -rf node_modules package-lock.json
        npm install --verbose --no-package-lock
    
    - name: Create required directories and files
      shell: bash
      run: |
        cd companion-app
        mkdir -p build assets app
        
        # Create a simple tray icon if it doesn't exist
        if [ ! -f "assets/tray-icon.png" ]; then
          # Create a minimal PNG file (1x1 transparent pixel)
          echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==" | base64 -d > assets/tray-icon.png
        fi
        
        # Copy and create all required icon formats
        cp assets/tray-icon.png build/icon.png
        cp build/icon.png build/icon.ico  # Windows
        cp build/icon.png build/icon.icns # macOS
        
        # Create app/index.html if it doesn't exist
        if [ ! -f "app/index.html" ]; then
          cat > app/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Zoom Connection Plugin</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .status { padding: 10px; border-radius: 5px; margin: 10px 0; }
                .connected { background: #d4edda; color: #155724; }
                .disconnected { background: #f8d7da; color: #721c24; }
            </style>
        </head>
        <body>
            <h1>Zoom Connection Plugin</h1>
            <div id="status" class="status disconnected">Status: Disconnected</div>
            <div id="info">
                <p>This plugin helps monitor and enhance your Zoom experience.</p>
                <p>Version: 1.0.0</p>
            </div>
        </body>
        </html>
        EOF
        fi
        
        # Create main.js if it doesn't exist
        if [ ! -f "main.js" ]; then
          cat > main.js << 'EOF'
        const { app, BrowserWindow, Tray, Menu, ipcMain } = require('electron');
        const path = require('path');
        const { WebSocketServer } = require('ws');
        
        let mainWindow;
        let tray;
        let wss;
        
        function createWindow() {
          mainWindow = new BrowserWindow({
            width: 400,
            height: 300,
            webPreferences: {
              nodeIntegration: true,
              contextIsolation: false
            },
            icon: path.join(__dirname, 'build', 'icon.png')
          });
        
          mainWindow.loadFile('app/index.html');
          
          mainWindow.on('close', (event) => {
            if (!app.isQuiting) {
              event.preventDefault();
              mainWindow.hide();
            }
          });
        }
        
        function createTray() {
          const iconPath = path.join(__dirname, 'build', 'icon.png');
          tray = new Tray(iconPath);
          
          const contextMenu = Menu.buildFromTemplate([
            { label: 'Show', click: () => mainWindow.show() },
            { label: 'Quit', click: () => { app.isQuiting = true; app.quit(); } }
          ]);
          
          tray.setContextMenu(contextMenu);
          tray.setToolTip('Zoom Connection Plugin');
        }
        
        function startWebSocketServer() {
          wss = new WebSocketServer({ port: 8080 });
          
          wss.on('connection', (ws) => {
            console.log('WebSocket client connected');
            
            ws.on('message', (message) => {
              console.log('Received:', message.toString());
            });
            
            // Send status every 5 seconds
            const interval = setInterval(() => {
              if (ws.readyState === ws.OPEN) {
                ws.send(JSON.stringify({ type: 'status', data: 'running' }));
              }
            }, 5000);
            
            ws.on('close', () => {
              clearInterval(interval);
              console.log('WebSocket client disconnected');
            });
          });
        }
        
        app.whenReady().then(() => {
          createWindow();
          createTray();
          startWebSocketServer();
        });
        
        app.on('window-all-closed', () => {
          if (process.platform !== 'darwin') {
            app.quit();
          }
        });
        
        app.on('activate', () => {
          if (BrowserWindow.getAllWindows().length === 0) {
            createWindow();
          }
        });
        EOF
        fi
    
    - name: Update package.json with compatible versions
      shell: bash
      run: |
        cd companion-app
        cat > package.json << 'EOF'
        {
          "name": "zoom-connection-plugin",
          "productName": "Zoom Connection Plugin",
          "version": "1.0.0",
          "description": "Enhanced connectivity plugin for Zoom meetings and recordings",
          "main": "main.js",
          "scripts": {
            "start": "electron .",
            "build": "electron-builder",
            "build:win": "electron-builder --win",
            "build:mac": "electron-builder --mac",
            "build:linux": "electron-builder --linux"
          },
          "author": "Netaji Yasara Silva",
          "license": "UNLICENSED",
          "private": true,
          "build": {
            "appId": "com.netajiyasarasilva.zoomconnectionplugin",
            "productName": "Zoom Connection Plugin",
            "asar": true,
            "directories": {
              "output": "dist",
              "buildResources": "build"
            },
            "files": [
              "main.js",
              "app/**/*",
              "node_modules/**/*"
            ],
            "win": {
              "target": "nsis",
              "icon": "build/icon.ico"
            },
            "mac": {
              "category": "public.app-category.education",
              "target": "dmg",
              "icon": "build/icon.icns"
            },
            "linux": {
              "target": "AppImage",
              "icon": "build/icon.png"
            },
            "nsis": {
              "oneClick": false,
              "allowToChangeInstallationDirectory": true,
              "createDesktopShortcut": true,
              "runAfterFinish": true
            }
          },
          "dependencies": {
            "ws": "^8.13.0"
          },
          "devDependencies": {
            "electron": "^22.3.27",
            "electron-builder": "^23.6.0"
          }
        }
        EOF
    
    - name: Install updated dependencies
      run: |
        cd companion-app
        npm install --verbose --no-package-lock
    
    - name: Debug - List files before build
      run: |
        cd companion-app
        echo "=== Current directory contents ==="
        ls -la
        echo "=== Build directory contents ==="
        ls -la build/ || echo "No build directory"
        echo "=== App directory contents ==="
        ls -la app/ || echo "No app directory"
        echo "=== Package.json contents ==="
        cat package.json
    
    - name: Build for Windows
      if: matrix.os == 'windows-latest'
      run: |
        cd companion-app
        npm run build:win
      env:
        CI: true
        DEBUG: electron-builder
        ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
        ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder
    
    - name: Build for macOS
      if: matrix.os == 'macos-latest'
      run: |
        cd companion-app
        npm run build:mac
      env:
        CI: true
        DEBUG: electron-builder
        CSC_IDENTITY_AUTO_DISCOVERY: false
        ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
        ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder
    
    - name: Build for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd companion-app
        # Set up virtual display for Linux build
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
        npm run build:linux
      env:
        CI: true
        DEBUG: electron-builder
        ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
        ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder
    
    - name: Debug - List build output
      run: |
        cd companion-app
        echo "=== Final directory structure ==="
        find . -type f -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" 2>/dev/null || echo "No installer files found"
        echo "=== Dist directory contents ==="
        ls -la dist/ 2>/dev/null || echo "No dist directory found"
        if [ -d "dist" ]; then
          echo "=== Nested dist contents ==="
          find dist/ -type f 2>/dev/null || echo "No files in dist"
        fi
    
    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: |
          companion-app/dist/*.exe
          companion-app/dist/**/*.exe
        if-no-files-found: warn
    
    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-installer
        path: |
          companion-app/dist/*.dmg
          companion-app/dist/**/*.dmg
        if-no-files-found: warn
    
    - name: Upload Linux artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-installer
        path: |
          companion-app/dist/*.AppImage
          companion-app/dist/**/*.AppImage
        if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Get package version
      id: package-version
      run: |
        VERSION="1.0.0"
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      continue-on-error: true
    
    - name: Debug - List downloaded artifacts
      run: |
        echo "=== Downloaded artifacts structure ==="
        find . -type f 2>/dev/null || echo "No files found"
        echo "=== Available artifact directories ==="
        ls -la . 2>/dev/null || echo "No directories found"
    
    - name: Create Release (only if artifacts exist)
      id: create_release
      if: hashFiles('**/*.exe') != '' || hashFiles('**/*.dmg') != '' || hashFiles('**/*.AppImage') != ''
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.package-version.outputs.tag }}
        name: Zoom Connection Plugin ${{ steps.package-version.outputs.version }}
        body: |
          ## Zoom Connection Plugin Release
          
          ### What's New
          - Latest version of the Zoom Connection Plugin
          - Enhanced stability and performance
          - Compatible with all supported Windows, macOS, and Linux versions
          
          ### Download Instructions
          1. **Windows Users**: Download the `.exe` installer
          2. **macOS Users**: Download the `.dmg` file
          3. **Linux Users**: Download the `.AppImage` file
          
          ### Installation
          - **Windows**: Run the .exe file and follow the installation wizard
          - **macOS**: Open the .dmg file and drag the app to Applications folder
          - **Linux**: Make the .AppImage executable and run it
          
          ### System Requirements
          - **Windows**: Windows 7 or newer
          - **macOS**: macOS 10.13 or newer
          - **Linux**: Ubuntu 18.04 or equivalent
          
          For support, please contact your course administrator.
        draft: false
        prerelease: false
        files: |
          **/*.exe
          **/*.dmg
          **/*.AppImage
